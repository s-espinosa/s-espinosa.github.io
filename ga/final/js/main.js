// fix everything

// someday/maybe refactor so that each sound is it's own object with on/off colors, patterns... anything else?


//**INITIAL SETUP**//

// setup
var onOff = "off";
var toClearOnOff = 0;
var padsArray = document.getElementsByClassName("pads");
var soundsArray = document.getElementsByClassName("sounds");

// pad colors
var kickOn = "purple";
var kickOnBlink = "#E1AADD";
var snareOn = "orange";
var snareOnBlink = "#FFC58B";
var hatClosedOn = "teal";
var hatClosedOnBlink = "#8FEEEE";
var hatOpenOn = "navy";
var hatOpenOnBlink = "#B9C0F2";

var padBackOn = kickOn;
var padBackOnBlink = kickOnBlink;
var padBackOff = "#A4A6A5";
var padBackOffBlink = "#CFD2D1";

// old nice blue blink
// var padBackOn = "#67A7CE";
// var padBackOnBlink = "#7FC8F6";


// instrument pattern arrays
var kickPattern = [];
var snarePattern = [];
var hatClosedPattern = [];
var hatOpenPattern = [];

// Set kick as initial sound
var activeSound = "kick";
var activeSoundPattern = kickPattern;

// initial beat per minute values
var bpm = 100; //100 beats per minute hard coded for now
var mspbeat = (60*1000)/bpm; //600 milliseconds for each beat
var msp16th = mspbeat/4; //150 milliseconds for each sixteenth note => each pad for 32 pads assuming 2 measures.
// var frequency = 600/(padsArray.length/2);

// add attributes and onclick behavior to pads
setPads();
setSounds();




// Set On button functions
document.getElementById("start").onclick = function() {
	if(onOff === "on") {
		return;
	} else {
		onOff = "on";
		blinkOn();
		toClearOnOff = setInterval(function(){blinkOn();}, msp16th*padsArray.length);
	}
}

// Set the "off" button up.
// if it's clicked and everything is already off (onOff set to "off", do nothing.
// if it's clicked and everything is on, turn it off using the clearInterval function generated by the on button.
document.getElementById("stop").onclick = function() {
	if(onOff === "off") {
		return;
	} else {
		onOff = "off";
		clearInterval(toClearOnOff);
	}
}







// blinking function for pads
function blinkOn() {
	if (onOff === "off") {
		return;
	} else {
		for (i=0; i<padsArray.length; i++) {
			howToBlink(padsArray[i],i);
			howToPlay(i, kickPattern, "kick");
			howToPlay(i, snarePattern, "snare");
			howToPlay(i, hatClosedPattern, "hatClosed");
			howToPlay(i, hatOpenPattern, "hatOpen");			
		}
	}
}

// set delays for blinking behavior on each pad (repeating from the beginning is handled by setInterval in original call from onclick)
function howToBlink(padElement, count) {
	if (activeSoundPattern[padElement.getAttribute("padNumber")] === 0) {
		setTimeout(function() {padElement.style.backgroundColor = padBackOffBlink;}, msp16th*(count));
		setTimeout(function() {padElement.style.backgroundColor = padBackOff;}, msp16th*(count+1));
	} else {
		setTimeout(function() {padElement.style.backgroundColor = padBackOnBlink;}, msp16th*(count));
		setTimeout(function() {padElement.style.backgroundColor = padBackOn;}, msp16th*(count+1));		
	}
}






// This is where the actual playing of the sound happens.
// Pull the sound name, create a path to the sound,
// access the array for the sound and determine if it's on or off (1 or 0)
// play the sound if it's on, get out of the function if it's off
function howToPlay(count, drumArray, drumSound) {
	var soundPath = "audio/" + drumSound + ".wav"
	if (drumArray[count] === 1) {
		setTimeout(function() {
			this.snd = new Audio(soundPath);
			snd.play();
		}, msp16th*(count));
	} else {
		return;
	}
}





// Assign numbers to each of the pads using an attribute.
// Generate an array that's equal to the number of pads for each drum sound.
// Make the pads turn on and off when clicked by assigning an onclick function to each pad.
function setPads() {
	for (i=0; i < padsArray.length; i++) {
		padsArray[i].setAttribute("padNumber", i);
		kickPattern.push(0);
		snarePattern.push(0);
		hatClosedPattern.push(0);
		hatOpenPattern.push(0);
		padsArray[i].onclick = function() {
			var padNumber = this.getAttribute("padNumber");
			if (activeSoundPattern[padNumber] === 0) {
				activeSoundPattern[padNumber] = 1;
				this.style.backgroundColor = padBackOn;
			} else {
				activeSoundPattern[padNumber] = 0;
				this.style.backgroundColor = padBackOff;		
			}
		}	
	}
}




function setSounds() {
	for (i=0; i < soundsArray.length; i++) {
		soundsArray[i].onclick = function() {
			var soundName = this.id;

			if (activeSound === soundName) {
				var soundPath = "audio/" + soundName + ".wav"
				var snd = new Audio(soundPath);
				snd.play();
			} else {
				changePads (soundName);
				var soundPath = "audio/" + soundName + ".wav"
				var snd = new Audio(soundPath);
				snd.play();
			}
		}	
	}
}



function changePads(newPad) {
	var newPadOn = newPad + "On";
	var newPadOnBlink = newPadOn + "Blink";
	var patternToActivate = newPad + "Pattern";


	activeSound = newPad;
	activeSoundPattern = window[patternToActivate];
	padBackOn = window[newPadOn];
	padBackOnBlink = window[newPadOnBlink];


	for (i=0; i<padsArray.length; i++) {
		if (activeSoundPattern[i] === 0) {
			padsArray[i].style.backgroundColor = padBackOff;
		} else {
			padsArray[i].style.backgroundColor = padBackOn;
		}

	}
}





// testing stuff

// console.log(padsArray.length);

// distributeFrequency(msp16th);
// // set pad attributes for how frequently to blink
// function distributeFrequency (freq) {
// 	for (i=0; i < padsArray.length; i++) {
// 		padsArray[i].setAttribute("freqBlinkOn", i*4);
// 		padsArray[i].setAttribute("freqBlinkOff", (i*4)+1);
// 	}
// }





// // check setup
// var printFrequency = document.getElementById("pad3").getAttribute("freqBlinkOff");
// console.log(printFrequency);


